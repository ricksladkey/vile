: Recommended keywords, with common extensions merged in.
.abbrev
.brief
begin
case-lambda
case
class
cond
define
define-syntax
define-class
do
else
for-each
if
lambda
let
letrec
letrec-syntax
let*-values
let*
let-syntax
let-values
let/ec
opt-lambda
syntax
syntax-case
unless
when
with-syntax
: Builtin functions (don't take blocks.)
and
call/cc
call-with-current-continuation
call-with-input-file
call-with-output-file
delay
dynamic-wind
exit-handler
field
import
inherit
init-field
interface
map
mixin
or
override
protect
provide
public
require
require-for-syntax
rename
syntax-error
unit/sig
syntax-rules
: Recommended highlighted builtins.
.default Ident2
*
+
-
: Need to match the special character .
.meta _
...
_meta .
/
;
<
<=
=
=>
>
>=
abs
acos
angle
append
apply
asin
assoc
assq
assv
atan
caar
cadr
call-with-input-file
call-with-output-file
call-with-values
car
cdddar
cddddr
cdr
ceiling
char->integer
char-downcase
char-upcase
close-input-port
close-output-port
cons
cos
current-input-port
current-output-port
denominator
display
eval
exact->inexact
exp
expt
#f
floor
force
gcd
imag-part
inexact->exact
integer->char
interaction-environment
lcm
length
list
list->string
list->vector
list-ref
list-tail
load
log
magnitude
make-polar
make-rectangular
make-string
make-vector
max
member
memq
memv
min
modulo
newline
not
null-environment
number->string
numerator
open-input-file
open-output-file
peek-char
quasiquote
quote
quotient
rationalize
read
read-char
real-part
remainder
reverse
round
scheme-report-environment
set!
set-car!
set-cdr!
sin
sqrt
string
string->list
string->number
string->symbol
string-append
string-copy
string-fill!
string-length
string-ref
string-set!
substring
symbol->string
#t
tan
transcript-off
transcript-on
truncate
unquote
unquote-splicing
values
vector
vector->list
vector-fill!
vector-length
vector-ref
vector-set!
with-input-from-file
with-output-to-file
write
write-char
boolean?
char-alphabetic?
char-ci<=?
char-ci<?
char-ci=?
char-ci>=?
char-ci>?
char-lower-case?
char-numeric?
char-ready?
char-upper-case?
char-whitespace?
char<=?
char<?
char=?
char>=?
char>?
char?
complex?
eof-object?
eq?
equal?
eqv?
even?
exact?
inexact?
input-port?
integer?
list?
negative?
null?
number?
odd?
output-port?
pair?
port?
positive?
procedure?
rational?
real?
string<=?
string<?
string=?
string>=?
string>?
string?
string-ci<=?
string-ci<?
string-ci=?
string-ci>=?
string-ci>?
symbol?
zero?
.default
